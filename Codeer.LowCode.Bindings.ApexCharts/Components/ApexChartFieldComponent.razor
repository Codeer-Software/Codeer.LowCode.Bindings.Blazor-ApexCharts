@using Codeer.LowCode.Blazor.Components.Fields
@using Codeer.LowCode.Blazor.RequestInterfaces
@using ApexCharts
@using Codeer.LowCode.Bindings.ApexCharts.Models
@using Codeer.LowCode.Blazor.Repository.Design
@using global::ApexCharts
@inherits FieldComponentBase<Codeer.LowCode.Bindings.ApexCharts.Fields.ApexChartField>
@inject Services Services

@if (!string.IsNullOrEmpty(Field.Design.SearchCondition.ModuleName)) {
  <ApexChart TItem="SeriesData" Title="@Field.Design.DisplayName" Options="Field.Options" @key="@Field.RefreshKey">
    @foreach (var series in Field.Series) {
      switch (series.Type) {
        case SeriesType.Area:
        case SeriesType.Bar:
        case SeriesType.Heatmap:
        case SeriesType.Line:
          <ApexPointSeries TItem="SeriesData"
                           Items="Field.SeriesData"
                           Name="@GetDisplayText(series.Name)"
                           SeriesType="@series.Type"
                           XValue="data => data.XValue"
                           YAggregate="data => data.Sum(y => y.Data[series.Name])"/>
          break;
        case SeriesType.Scatter:
          <ApexPointSeries TItem="SeriesData"
                           Items="Field.SeriesData"
                           Name="@GetDisplayText(series.Name)"
                           SeriesType="@series.Type"
                           XValue="data => data.XValue"
                           YValue="data => data.Data[series.Name]"/>
          break;
        case SeriesType.Donut:
        case SeriesType.Pie:
        case SeriesType.PolarArea:
          <ApexPointSeries TItem="SeriesData"
                           Items="Field.SeriesData"
                           SeriesType="@series.Type"
                           XValue="data => data.XValue"
                           YAggregate="@(data => data.Sum(y => y.Data[series.Name]))"/>
          break;
        default: break;
      }

      if (series.Type is SeriesType.Donut or SeriesType.Pie or SeriesType.PolarArea) {
        break;
      } 
    }
  </ApexChart>
} else if (Services.AppInfoService.IsDesignMode) {
  <ConfigurationRequiredBanner>
    ModuleName is not set
  </ConfigurationRequiredBanner>
}

@code {

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    Field.SetStateChangedReceiver(StateHasChanged);
  }

  private ModuleDesign? GetModule(string name) => Services.AppInfoService.GetDesignData().Modules.Find(name);

  private string GetDisplayText(string fieldName)
  {
    var module = GetModule(Field.Design.SearchCondition.ModuleName);
    if (module == null) return fieldName;
    var field = module.Fields.Find(field => field.Name == fieldName);
    if (field is IDisplayName displayName && !string.IsNullOrEmpty(displayName.DisplayName))
      return displayName.DisplayName;
    return fieldName;
  }

}