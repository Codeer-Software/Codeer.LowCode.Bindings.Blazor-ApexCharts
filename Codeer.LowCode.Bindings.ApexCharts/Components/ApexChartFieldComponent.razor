@using Codeer.LowCode.Blazor.Components.Fields
@using Codeer.LowCode.Blazor.RequestInterfaces
@using ApexCharts
@using Codeer.LowCode.Bindings.ApexCharts.Models
@using global::ApexCharts
@inherits FieldComponentBase<Codeer.LowCode.Bindings.ApexCharts.Fields.ApexChartField>
@inject Services Services

@if (!string.IsNullOrEmpty(Field.Design.SearchCondition.ModuleName)) {
  <div class="container vertical">
    <div class="container vertical fill" @key="@Field.Design.SeriesType">
      <ApexChart TItem="SeriesData" Title="@Field.Design.DisplayName" Options="Field.Options">
        @foreach (var series in Field.Series) {
          switch (series.Type) {
            case SeriesType.Area:
            case SeriesType.Bar:
            case SeriesType.Heatmap:
            case SeriesType.Line:
              <ApexPointSeries TItem="SeriesData"
                               Items="Field.SeriesData"
                               Name="@series.Name"
                               SeriesType="@series.Type"
                               XValue="data => data.XValue"
                               YAggregate="data => data.Sum(y => y.Data[series.Name])"/>
              break;
            case SeriesType.Scatter:
              <ApexPointSeries TItem="SeriesData"
                               Items="Field.SeriesData"
                               Name="@series.Name"
                               SeriesType="@series.Type"
                               XValue="data => data.XValue"
                               YValue="data => data.Data[series.Name]"/>
              break;
            case SeriesType.Donut:
            case SeriesType.Pie:
            case SeriesType.PolarArea:
              <ApexPointSeries TItem="SeriesData"
                               Items="Field.SeriesData"
                               SeriesType="@series.Type"
                               XValue="data => data.XValue"
                               YAggregate="@(data => data.Sum(y => y.Data[series.Name]))"/>
              break;
            default: break;
          }

          if (series.Type is SeriesType.Donut or SeriesType.Pie or SeriesType.PolarArea) {
            break;
          } 
        }
      </ApexChart>
    </div>
  </div>
} else if (Services.AppInfoService.IsDesignMode) {
  <ConfigurationRequiredBanner>
    ModuleName is not set
  </ConfigurationRequiredBanner>
}

@code {

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    Field.SetStateChangedReceiver(StateHasChanged);
  }

}