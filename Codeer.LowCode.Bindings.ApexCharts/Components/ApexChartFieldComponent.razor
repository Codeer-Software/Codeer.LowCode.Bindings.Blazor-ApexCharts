@using Codeer.LowCode.Blazor.Components.Fields
@using Codeer.LowCode.Blazor.RequestInterfaces
@using ApexCharts
@using Codeer.LowCode.Bindings.ApexCharts.Models
@using global::ApexCharts
@inherits FieldComponentBase<Codeer.LowCode.Bindings.ApexCharts.Fields.ApexChartField>
@inject Services Services

@if (!string.IsNullOrEmpty(Field.Design.SearchCondition.ModuleName)) {
  <div class="container vertical">
    <div class="container vertical fill" @key="@Field.Design.SeriesType">
      <ApexChart TItem="SeriesData" Title="@Field.Design.DisplayName" Options="Field.Options">
        @switch (Field.Design.SeriesType) {
          case SeriesType.Area:
          case SeriesType.Bar:
          case SeriesType.Heatmap:
          case SeriesType.Line:
          case SeriesType.Scatter:
          case SeriesType.Treemap:
          case SeriesType.RangeArea:
            foreach (var series in Field.Series) {
              <ApexPointSeries TItem="SeriesData"
                               Items="Field.SeriesData"
                               Name="@series"
                               SeriesType="@Field.Design.SeriesType"
                               XValue="data => data.XValue"
                               YAggregate="data => data.Sum(y => y.Data[series])"/>
            }

            break;
          case SeriesType.Donut:
          case SeriesType.Pie:
          case SeriesType.PolarArea:
          case SeriesType.Radar:
          case SeriesType.RadialBar:
            <ApexPointSeries TItem="SeriesData"
                             Items="Field.SingleSeriesData"
                             SeriesType="@Field.Design.SeriesType"
                             XValue="@(data => data.Data["XValue"]!)"
                             YAggregate="@(data => data.Sum(y => y.Data["XValue"]))"/>
            break;
          default: break;
        }
      </ApexChart>
    </div>
  </div>
} else if (Services.AppInfoService.IsDesignMode) {
  <ConfigurationRequiredBanner>
    ModuleName is not set
  </ConfigurationRequiredBanner>
}

@code {

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    Field.SetStateChangedReceiver(StateHasChanged);
  }

}